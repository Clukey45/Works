{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "2023bbf7-97e9-43bb-85b9-95441acd3656",
   "metadata": {},
   "source": [
    "Ocean Beach Events Web Data Pipeline Project <br>\n",
    "Christopher Luke <br>\n",
    "2025 \n",
    "\n",
    "Background: This project utilizes Python and its libraries to extract community event data from the Ocean Beach MainStreet Association website. The pipeline parses raw HTML into structured datasets; organizing event details such as dates, times, and titles, and outputting them into a Pandas DataFrame for analysis and visualization.\n",
    "\n",
    "Librarys used: \n",
    "<ins>*requests*</ins> - for sending HTTP requests and retrieving HTML information,\n",
    "<ins>*BeautifulSoup*</ins> - for navigating through HTML information,\n",
    "<ins>*datetime*</ins> - for handling date and time related information,\n",
    "<ins>*pandas*</ins> - for organizing tabular data  \n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "7db409c3-b915-415c-9a9d-aa5df724e7d8",
   "metadata": {},
   "outputs": [],
   "source": [
    "import requests \n",
    "from bs4 import BeautifulSoup as bs\n",
    "import pandas as pd \n",
    "from datetime import datetime, timedelta"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "22e3d0d3-c24a-40db-9ea6-0481428bd7ec",
   "metadata": {},
   "source": [
    "This project is my first attempt to apply what I’ve been learning in Python towards a real-world problem: finding information online, understanding how to extract and organize it, and transforming it into a structured, analyzable dataset. I wanted to start with something small, preferably a single website, yet still challenging and personally useful. With this in mind, I decided to build a pipeline to capture and analyze local events in my community of Ocean Beach, San Diego. I will walk through my thought process during the entire creation cycle, explaining the reasoning behind my decisions.  \n",
    "\n",
    "To start, I needed a reliable data source. After searching online, I found [Ocean Beach San Diego](https://oceanbeachsandiego.com), which provides event information about Newport Avenue in a monthly calendar format. The URL for the calendar changes each month following a predictable pattern (`/calendar/month/year-month/`). Knowing this, I generated a list of URLs for each month of a year for a sequence of years (I decided on the past three years worth of events) using list comprehensions. With these lists, and by combining them with the Python libraries `requests` and `Beautiful Soup`, I now had a systematic way to iterate through each page, extract the raw HTML, and parse it into a structure I could actually work with.  \n",
    "\n",
    "Inspecting the HTML revealed that the calendar is structured as a `<table>` containing a `<tbody>`. Each week is represented by a `<tr>` (row), which can contain information about numerical dates and event types for that week, both single-day (`class=\"single-day\"`) and multi-day (`class=\"multi-day\"`) events. Inside each `<tr>` are `<td>` elements representing individual days, which may be empty or contain events - when an event exists, it is enclosed in a `<div class=\"item\">` element, containing the event title (inside an `<a>` tag) and times (inside `<span>` tags).  \n",
    "\n",
    "From this analysis, I developed my initial strategy: request the HTML for each calendar URL, iterate through the `<tbody>` to find `<tr>` elements for single- and multi-day events, then parse their `<td>` elements if they contained event details. Each event, once extracted, could be stored in a dictionary, and the collection of dictionaries would ultimately be converted into a Pandas DataFrame for analysis.  \n",
    "\n",
    "This approach worked well for single-day events, but I quickly noticed a problem with multi-day events: they were being recorded multiple times, all with the same start date. To troubleshoot, I went back and inspected the HTML more carefully - that’s when I noticed the role of the `colspan` attribute. Multi-day events weren’t actually listed with separate dates — instead, they were represented by a single start date, with the `colspan` value indicating how many days the event lasted. For example, `colspan=3 data-date=2025-08-12` meant the event ran from August 12th through the 14th. \n",
    "At first, my code could not handle this and only captured the given start date - however, once I understood the purpose of `colspan` I had the key to fixing it. My solution was to generate the full date range by creating a sequence that matched the `colspan` value and then extend the event across those days using Python’s `datetime.timedelta`. With this approach, multi-day events were now recorded with the correct span of dates rather than just the same date entry. \n",
    "\n",
    "This process also revealed another classification issue - if an event placed in the multi-day events `<tr>` only lasted one day, is it technically still a multi-day event? This prompted me to reinspect the HTML and by doing so I noticed that there were inconsistencies in the HTML itself! For instance, a committee event during one month might have been listed under the single day `<tr>`, but in the following month under the multi-event `<tr>` while still only being referenced in the calendar for one day. To resolve this problem I relied on the classification given within the `<td>` element and not the `<tr>` element for deciding event classification and thus proper date handling.    \n",
    "\n",
    "The results of this process are illustrated in the code below, which generates the complete event DataFrame."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "40f86f64-dfd4-426f-8765-2c460b4d0ae2",
   "metadata": {},
   "outputs": [],
   "source": [
    "def scrape_ob_calendar():\n",
    "    base_url = 'https://oceanbeachsandiego.com/calendar/month/'\n",
    "    yearlist = ['202' + f'{i}' + '-' for i in range(2,6)]\n",
    "    eventlist = []\n",
    "    for year in yearlist:\n",
    "        urllist  = [base_url + year + f\"{i:02d}\" for i in range(1,13)]\n",
    "        for url in urllist:\n",
    "            response = requests.get(url)\n",
    "            soup = bs(response.text, 'html.parser')\n",
    "            tbody = soup.find('tbody')\n",
    "            for tr in tbody.find_all('tr', class_=['single-day','multi-day']):\n",
    "                for td in tr.find_all('td'):\n",
    "                    etype = td.get(\"class\")\n",
    "                    if td.find('div', class_=\"item\") and 'single-day' in etype:\n",
    "                        date = td.get('data-date')\n",
    "                        date = datetime.strptime(date,\"%Y-%m-%d\")\n",
    "                        month = date.strftime(\"%B\")\n",
    "                        day = date.strftime(\"%A\")\n",
    "                        year = date.strftime(\"%Y\")\n",
    "                        items = td.find_all('div', class_='item')\n",
    "                        for item in items:\n",
    "                            d = {}\n",
    "                            event = item.find('a').get_text(strip=True)\n",
    "                            start = item.find('span', class_='date-display-start')\n",
    "                            if start:\n",
    "                                start = start.get_text(strip=True)\n",
    "                            else:\n",
    "                                start = item.find('span', class_='date-display-single').get_text(strip=True)\n",
    "                            end = item.find('span', class_='date-display-end')\n",
    "                            if end:\n",
    "                                end = end.get_text(strip=True)\n",
    "                            else:\n",
    "                                end = None\n",
    "                            d['event type'] = etype[0]\n",
    "                            d['day'] = day\n",
    "                            d['month'] = month\n",
    "                            d['year'] = year\n",
    "                            d['date'] = date\n",
    "                            d['event'] = event\n",
    "                            d['start time'] = start\n",
    "                            d['end time'] = end\n",
    "                            eventlist.append(d)\n",
    "                    elif td.find('div', class_=\"item\") and 'multi-day' in td.get(\"class\"):\n",
    "                        datespan = int(td.get('colspan'))\n",
    "                        date = td.get('data-date')\n",
    "                        date = datetime.strptime(date, \"%Y-%m-%d\")\n",
    "                        items = td.find_all('div', class_='item')\n",
    "                        for dayi in range(datespan):\n",
    "                            multidate = date + timedelta(days = dayi)\n",
    "                            month = multidate.strftime(\"%B\")\n",
    "                            day = multidate.strftime(\"%A\")\n",
    "                            year = multidate.strftime(\"%Y\")\n",
    "                            for item in items:\n",
    "                                d = {}\n",
    "                                event = item.find('a').get_text(strip=True)\n",
    "                                start = item.find('span', class_='date-display-start')\n",
    "                                if start:\n",
    "                                    start = start.get_text(strip=True)\n",
    "                                else:\n",
    "                                    start = item.find('span', class_='date-display-single').get_text(strip=True)\n",
    "                                end = item.find('span', class_='date-display-end')\n",
    "                                if end:\n",
    "                                    end = end.get_text(strip=True)\n",
    "                                else:\n",
    "                                    end = None\n",
    "                                d['event type'] = etype[0]\n",
    "                                d['day'] = day\n",
    "                                d['month'] = month\n",
    "                                d['year'] = year\n",
    "                                d['date'] = multidate\n",
    "                                d['event'] = event\n",
    "                                d['start time'] = start\n",
    "                                d['end time'] = end\n",
    "                                eventlist.append(d)\n",
    "    df = pd.DataFrame(eventlist)       \n",
    "    return df\n",
    "                           \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "e0caf5e3-cb53-416b-8fa3-48a8450cbd35",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>event type</th>\n",
       "      <th>day</th>\n",
       "      <th>month</th>\n",
       "      <th>year</th>\n",
       "      <th>date</th>\n",
       "      <th>event</th>\n",
       "      <th>start time</th>\n",
       "      <th>end time</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>single-day</td>\n",
       "      <td>Friday</td>\n",
       "      <td>January</td>\n",
       "      <td>2022</td>\n",
       "      <td>2022-01-07</td>\n",
       "      <td>Promotion Committee</td>\n",
       "      <td>9:00 AM</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>single-day</td>\n",
       "      <td>Friday</td>\n",
       "      <td>February</td>\n",
       "      <td>2022</td>\n",
       "      <td>2022-02-04</td>\n",
       "      <td>Promotion Committee</td>\n",
       "      <td>9:00 AM</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>single-day</td>\n",
       "      <td>Friday</td>\n",
       "      <td>February</td>\n",
       "      <td>2022</td>\n",
       "      <td>2022-02-18</td>\n",
       "      <td>OB Community Cleanup - Feb. 18th</td>\n",
       "      <td>8:00 AM</td>\n",
       "      <td>10:00 AM</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>single-day</td>\n",
       "      <td>Friday</td>\n",
       "      <td>March</td>\n",
       "      <td>2022</td>\n",
       "      <td>2022-03-04</td>\n",
       "      <td>Promotion Committee</td>\n",
       "      <td>9:00 AM</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>single-day</td>\n",
       "      <td>Friday</td>\n",
       "      <td>April</td>\n",
       "      <td>2022</td>\n",
       "      <td>2022-04-01</td>\n",
       "      <td>Promotion Committee</td>\n",
       "      <td>9:00 AM</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>584</th>\n",
       "      <td>multi-day</td>\n",
       "      <td>Thursday</td>\n",
       "      <td>December</td>\n",
       "      <td>2025</td>\n",
       "      <td>2025-12-18</td>\n",
       "      <td>Shop Small, Shop Local Ocean Beach</td>\n",
       "      <td>12:00 AM</td>\n",
       "      <td>11:45 PM</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>585</th>\n",
       "      <td>multi-day</td>\n",
       "      <td>Friday</td>\n",
       "      <td>December</td>\n",
       "      <td>2025</td>\n",
       "      <td>2025-12-19</td>\n",
       "      <td>Shop Small, Shop Local Ocean Beach</td>\n",
       "      <td>12:00 AM</td>\n",
       "      <td>11:45 PM</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>586</th>\n",
       "      <td>single-day</td>\n",
       "      <td>Wednesday</td>\n",
       "      <td>December</td>\n",
       "      <td>2025</td>\n",
       "      <td>2025-12-17</td>\n",
       "      <td>OB Farmers Market</td>\n",
       "      <td>4:00 PM</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>587</th>\n",
       "      <td>single-day</td>\n",
       "      <td>Wednesday</td>\n",
       "      <td>December</td>\n",
       "      <td>2025</td>\n",
       "      <td>2025-12-24</td>\n",
       "      <td>OB Farmers Market</td>\n",
       "      <td>4:00 PM</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>588</th>\n",
       "      <td>single-day</td>\n",
       "      <td>Wednesday</td>\n",
       "      <td>December</td>\n",
       "      <td>2025</td>\n",
       "      <td>2025-12-31</td>\n",
       "      <td>OB Farmers Market</td>\n",
       "      <td>4:00 PM</td>\n",
       "      <td>None</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>589 rows × 8 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     event type        day     month  year       date  \\\n",
       "0    single-day     Friday   January  2022 2022-01-07   \n",
       "1    single-day     Friday  February  2022 2022-02-04   \n",
       "2    single-day     Friday  February  2022 2022-02-18   \n",
       "3    single-day     Friday     March  2022 2022-03-04   \n",
       "4    single-day     Friday     April  2022 2022-04-01   \n",
       "..          ...        ...       ...   ...        ...   \n",
       "584   multi-day   Thursday  December  2025 2025-12-18   \n",
       "585   multi-day     Friday  December  2025 2025-12-19   \n",
       "586  single-day  Wednesday  December  2025 2025-12-17   \n",
       "587  single-day  Wednesday  December  2025 2025-12-24   \n",
       "588  single-day  Wednesday  December  2025 2025-12-31   \n",
       "\n",
       "                                  event start time  end time  \n",
       "0                   Promotion Committee    9:00 AM      None  \n",
       "1                   Promotion Committee    9:00 AM      None  \n",
       "2      OB Community Cleanup - Feb. 18th    8:00 AM  10:00 AM  \n",
       "3                   Promotion Committee    9:00 AM      None  \n",
       "4                   Promotion Committee    9:00 AM      None  \n",
       "..                                  ...        ...       ...  \n",
       "584  Shop Small, Shop Local Ocean Beach   12:00 AM  11:45 PM  \n",
       "585  Shop Small, Shop Local Ocean Beach   12:00 AM  11:45 PM  \n",
       "586                   OB Farmers Market    4:00 PM      None  \n",
       "587                   OB Farmers Market    4:00 PM      None  \n",
       "588                   OB Farmers Market    4:00 PM      None  \n",
       "\n",
       "[589 rows x 8 columns]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df = scrape_ob_calendar()\n",
    "display(df)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a261c076-7b81-4564-964b-eed7c471a404",
   "metadata": {},
   "source": [
    "With this organized DataFrame, I can start performing some analysis - for example, I might want to quantify how frequently each unique event occurs each year. These insights might reveal which events are most popular or meaningful in my community, and by comparing them over multiple years I might be able to detect shifts in interests. To preserve the original data, I use Python’s built-in copy library to create a separate version that I can manipulate safely.\n",
    "\n",
    "Next, I leverage Pandas’ groupby function to add a new column, count, representing the number of occurrences of each event per year. I then remove duplicate rows so each event-year combination appears once, and sort the results by year and event frequency. For ease of comparison I limit the output to the top 10 most occuring events per year."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "50354941-1666-4a8a-b6bb-a96232b6bc0e",
   "metadata": {},
   "outputs": [],
   "source": [
    "import copy as copy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "4061cc3d-27cf-4adc-8293-77de74e7f2eb",
   "metadata": {},
   "outputs": [],
   "source": [
    "df2 = df.copy()\n",
    "df2['count'] = df2.groupby(['year','event'])['event'].transform('count')\n",
    "df2 = df2.drop_duplicates(subset=['year','event'])\n",
    "df2 = df2.sort_values(by = ['year','count'], ascending = False)[['event','count','year']].reset_index(drop=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "f084a12b-2fb7-44d4-a1f2-e27d82209212",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>event</th>\n",
       "      <th>count</th>\n",
       "      <th>year</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>OB Farmers Market</td>\n",
       "      <td>43</td>\n",
       "      <td>2023</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Promotion Committee</td>\n",
       "      <td>12</td>\n",
       "      <td>2023</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Board of Directors</td>\n",
       "      <td>9</td>\n",
       "      <td>2023</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Cymbiotika San Diego Open</td>\n",
       "      <td>8</td>\n",
       "      <td>2023</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Finance Task Force</td>\n",
       "      <td>4</td>\n",
       "      <td>2023</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Made in PL + OB Holiday Market</td>\n",
       "      <td>2</td>\n",
       "      <td>2023</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Free Presentation \"New Laws for 2023\" at Newbr...</td>\n",
       "      <td>1</td>\n",
       "      <td>2023</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>FY23 OBMA Annual Meeting</td>\n",
       "      <td>1</td>\n",
       "      <td>2023</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Event: TEA The Eternal Art – January 15th</td>\n",
       "      <td>1</td>\n",
       "      <td>2023</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>2023 OBMA Annual Awards Celebration</td>\n",
       "      <td>1</td>\n",
       "      <td>2023</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                               event  count  year\n",
       "0                                  OB Farmers Market     43  2023\n",
       "1                                Promotion Committee     12  2023\n",
       "2                                 Board of Directors      9  2023\n",
       "3                          Cymbiotika San Diego Open      8  2023\n",
       "4                                 Finance Task Force      4  2023\n",
       "5                     Made in PL + OB Holiday Market      2  2023\n",
       "6  Free Presentation \"New Laws for 2023\" at Newbr...      1  2023\n",
       "7                           FY23 OBMA Annual Meeting      1  2023\n",
       "8          Event: TEA The Eternal Art – January 15th      1  2023\n",
       "9                2023 OBMA Annual Awards Celebration      1  2023"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>event</th>\n",
       "      <th>count</th>\n",
       "      <th>year</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>OB Farmers Market</td>\n",
       "      <td>52</td>\n",
       "      <td>2024</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Shop Small, Shop Local Ocean Beach</td>\n",
       "      <td>23</td>\n",
       "      <td>2024</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Trivia Nights at Dirty Birds OB</td>\n",
       "      <td>16</td>\n",
       "      <td>2024</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Lizzie: The Musical at Wildsong Theater and Ar...</td>\n",
       "      <td>13</td>\n",
       "      <td>2024</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Promotion Committee</td>\n",
       "      <td>12</td>\n",
       "      <td>2024</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Finance Task Force</td>\n",
       "      <td>12</td>\n",
       "      <td>2024</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Board of Directors</td>\n",
       "      <td>12</td>\n",
       "      <td>2024</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>OB Planning Board</td>\n",
       "      <td>10</td>\n",
       "      <td>2024</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Footloose, the Musical at OB Playhouse</td>\n",
       "      <td>6</td>\n",
       "      <td>2024</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>The San Diego Audubon Society Bird Festival: B...</td>\n",
       "      <td>5</td>\n",
       "      <td>2024</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                               event  count  year\n",
       "0                                  OB Farmers Market     52  2024\n",
       "1                 Shop Small, Shop Local Ocean Beach     23  2024\n",
       "2                    Trivia Nights at Dirty Birds OB     16  2024\n",
       "3  Lizzie: The Musical at Wildsong Theater and Ar...     13  2024\n",
       "4                                Promotion Committee     12  2024\n",
       "5                                 Finance Task Force     12  2024\n",
       "6                                 Board of Directors     12  2024\n",
       "7                                  OB Planning Board     10  2024\n",
       "8             Footloose, the Musical at OB Playhouse      6  2024\n",
       "9  The San Diego Audubon Society Bird Festival: B...      5  2024"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>event</th>\n",
       "      <th>count</th>\n",
       "      <th>year</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>OB Farmers Market</td>\n",
       "      <td>53</td>\n",
       "      <td>2025</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Shop Small, Shop Local Ocean Beach</td>\n",
       "      <td>23</td>\n",
       "      <td>2025</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>OB Planning Board</td>\n",
       "      <td>12</td>\n",
       "      <td>2025</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Finance Task Force</td>\n",
       "      <td>12</td>\n",
       "      <td>2025</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Board of Directors</td>\n",
       "      <td>12</td>\n",
       "      <td>2025</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Economic Vitality Committee</td>\n",
       "      <td>11</td>\n",
       "      <td>2025</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Promotion Committee</td>\n",
       "      <td>11</td>\n",
       "      <td>2025</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Design Committee</td>\n",
       "      <td>11</td>\n",
       "      <td>2025</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Clean &amp; Safe Committee</td>\n",
       "      <td>11</td>\n",
       "      <td>2025</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>OB Church Camp for Kids: K - 5th Grade</td>\n",
       "      <td>5</td>\n",
       "      <td>2025</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                    event  count  year\n",
       "0                       OB Farmers Market     53  2025\n",
       "1      Shop Small, Shop Local Ocean Beach     23  2025\n",
       "2                       OB Planning Board     12  2025\n",
       "3                      Finance Task Force     12  2025\n",
       "4                      Board of Directors     12  2025\n",
       "5             Economic Vitality Committee     11  2025\n",
       "6                     Promotion Committee     11  2025\n",
       "7                        Design Committee     11  2025\n",
       "8                  Clean & Safe Committee     11  2025\n",
       "9  OB Church Camp for Kids: K - 5th Grade      5  2025"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "display(df2.loc[df2['year'] == '2023'].reset_index(drop=True).head(10))\n",
    "display(df2.loc[df2['year'] == '2024'].reset_index(drop=True).head(10))\n",
    "display(df2.loc[df2['year'] == '2025'].reset_index(drop=True).head(10))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6d0d687b-cc46-4ce5-93e9-c5ed1d03e5f0",
   "metadata": {},
   "source": [
    "From this analysis, it is clear that one event takes precedence over all others: the OB Farmers Market, which occurs almost every week throughout the year. Over the past two years, a new promotional event has also emerged during the holiday season, aimed at encouraging shopping at locally owned businesses. Consistently present across all years are committee and board-led events, which involve decision-making, planning, and logistical support for community development, programs, and maintenance. Overall, it is evident that Ocean Beach is a highly active community, committed to supporting itself through grassroots initiatives and local engagement.\n",
    "\n",
    "Reflections and Future Plans: This project provided me with valuable hands-on experience with engaging with real-world community data, and highlighting that even well-structured sources can contain hidden inconsistencies. The analysis revealed the OB Farmers Market as a dominant recurring event, the rise of seasonal promotional activities, and the steady role of committee and board-led initiatives in supporting local governance. Future improvements could include adding attendance or economic impact metrics, expanding the dataset across more years or neighborhoods, and creating visual dashboards to make trends and patterns more accessible and actionable."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b31c4dbf-33a3-4324-9942-3c7ad7492104",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
